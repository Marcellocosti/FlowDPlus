input: # files to use, set FD to null for binary classification
    prompt: /data/lagliett/HF_data/TrainingBDTapass7/filtered/Prompt_Dplus_pprun3_LHC24d3_pT_0_100.parquet.gzip
    FD: /data/lagliett/HF_data/TrainingBDTapass7/filtered/FD_Dplus_pprun3_LHC24d3_pT_0_100.parquet.gzip
    data: /data/lagliett/HF_data/TrainingBDTapass7/filtered/Data_Dplus_pprun3_LHC22pass7_pT_0_100.parquet.gzip
    treename: null

output:
    leg_labels: # legend labels, keep the right number of classes
        Bkg: Background
        Prompt: Prompt D$^+$
        FD: Feed-down D$^+$
    out_labels: # output labels, keep the right number of classes
        Bkg: Bkg
        Prompt: Prompt
        FD: FD
    dir: '/home/mdicosta/ciaociao' # output dir

pt_ranges: # ranges in pt to split the data in the ml training and testing
    min: [0, 1, 2, 3, 5, 8, 12, 16] # list
    max: [1, 2, 3, 5, 8, 12, 16, 50] # list

data_prep:
    filt_bkg_mass: (fM < 1.8 or fM > 1.95) and fM < 2.05 # pandas query to select bkg candidates
    dataset_opt: equal  # change how the dataset is built, options available: 'equal', 'max_signal'
                        # 'equal' -> same number of prompt/FD/bkg (not using all the signal available)
                        # 'max_signal' -> try to use all the signal (prompt and FD) + add n_bkg = 2 * (n_prompt + n_FD)
    bkg_mult: [1., 1., 1., 1., 1., 1., 1., 1., 1.] # list of multipliers for (nPrompt + nFD) used to determine nCandBkg in the 'max_signal' option
    seed_split: 42 # seed used for train_test_split(...)
    test_fraction: 0.2 # fraction of data used for test set and efficiencies     

ml:
    raw_output: False # use raw_output (True) of probability (False) as output of the model
    roc_auc_average: 'macro' # 'macro' or 'weighted'
    roc_auc_approach: 'ovo'  # 'ovo' or 'ovr'
    training_columns: ['fDecayLength', 'fDecayLengthXY', 'fCpa', 'fCpaXY', 
                        'fImpactParameter0', 'fImpactParameter1', 'fImpactParameter2',
                        'fNSigTpcTofPi0',   'fNSigTpcTofKa1', 'fNSigTpcTofPi2'] 
                       # list of training variables
#---------------------------------------------FROM CHINU------------------------------------------#
    hyper_par: [
        {'max_depth':4, 'learning_rate':0.029, 'n_estimators':500, 'min_child_weight':2.7, 'subsample':0.90, 'colsample_bytree':0.97, 'n_jobs':8, 'tree_method':hist, 'lambda':0.01},
        {'max_depth':4, 'learning_rate':0.029, 'n_estimators':500, 'min_child_weight':2.7, 'subsample':0.90, 'colsample_bytree':0.97, 'n_jobs':8, 'tree_method':hist, 'lambda':0.01},
        {'max_depth':4, 'learning_rate':0.029, 'n_estimators':500, 'min_child_weight':2.7, 'subsample':0.90, 'colsample_bytree':0.97, 'n_jobs':8, 'tree_method':hist, 'lambda':0.01},
        {'max_depth':4, 'learning_rate':0.029, 'n_estimators':500, 'min_child_weight':2.7, 'subsample':0.90, 'colsample_bytree':0.97, 'n_jobs':8, 'tree_method':hist, 'lambda':0.01},
        {'max_depth':4, 'learning_rate':0.029, 'n_estimators':500, 'min_child_weight':2.7, 'subsample':0.90, 'colsample_bytree':0.97, 'n_jobs':8, 'tree_method':hist, 'lambda':0.01},
        {'max_depth':4, 'learning_rate':0.029, 'n_estimators':500, 'min_child_weight':2.7, 'subsample':0.90, 'colsample_bytree':0.97, 'n_jobs':8, 'tree_method':hist, 'lambda':0.01},
        {'max_depth':4, 'learning_rate':0.029, 'n_estimators':500, 'min_child_weight':2.7, 'subsample':0.90, 'colsample_bytree':0.97, 'n_jobs':8, 'tree_method':hist, 'lambda':0.01},
        {'max_depth':4, 'learning_rate':0.029, 'n_estimators':500, 'min_child_weight':2.7, 'subsample':0.90, 'colsample_bytree':0.97, 'n_jobs':8, 'tree_method':hist, 'lambda':0.01},
        {'max_depth':4, 'learning_rate':0.029, 'n_estimators':500, 'min_child_weight':2.7, 'subsample':0.90, 'colsample_bytree':0.97, 'n_jobs':8, 'tree_method':hist, 'lambda':0.01}
    ]
               # list of dicts of hyperparameters (one for each pT bin)

    hyper_par_opt:
      do_hyp_opt: True # whether to do the parameter optimization
      njobs: 8 # number of parallel jobs used in hyper-parameter optimization, -1. to use all
      nfolds: 5 # number of folds used in cross validation
      initpoints: 10 # steps of random exploration you want to perform
      n_trials: 15 # steps for bayesian optimization
      timeout: null
      opt_tuna_config: {'max_depth': !!python/tuple [1, 4], 
                        'learning_rate': !!python/tuple [0.01, 0.1],
                        'n_estimators': !!python/tuple [300, 1500], 
                        'min_child_weight': !!python/tuple [1, 10],
                        'subsample': !!python/tuple [0.8, 1.], 
                        'colsample_bytree': !!python/tuple [0.8, 1.],
                        'lambda': !!python/tuple [0., 0.001]}
                        # configuration dictionary for optimize_params_bayes()
    
    saved_models: [/home/lagliett/outputML/apass7Dplus/noNorm/pt0_1/ModelHandler_pT_0_1.pickle, 
                    /home/lagliett/outputML/apass7Dplus/noNorm/pt1_2/ModelHandler_pT_1_2.pickle, 
                   /home/lagliett/outputML/apass7Dplus/noNorm/pt2_3/ModelHandler_pT_2_3.pickle, 
                   /home/lagliett/outputML/apass7Dplus/noNorm/pt3_5/ModelHandler_pT_3_5.pickle,
                   /home/lagliett/outputML/apass7Dplus/noNorm/pt5_7/ModelHandler_pT_5_7.pickle,  
                   /home/lagliett/outputML/apass7Dplus/noNorm/pt7_10/ModelHandler_pT_7_10.pickle, 
                   /home/lagliett/outputML/apass7Dplus/noNorm/pt10_15/ModelHandler_pT_10_15.pickle,
                   /home/lagliett/outputML/apass7Dplus/noNorm/pt15_20/ModelHandler_pT_15_20.pickle,
                   /home/lagliett/outputML/apass7Dplus/noNorm/pt20_50/ModelHandler_pT_20_50.pickle] # list of saved ModelHandler (path+file), compatible with the pt bins # list of saved ModelHandler (path+file), compatible with the pt bins

plots:
    plotting_columns: ['fM', 'fPt', 
                        'fDecayLength', 'fDecayLengthXY', 'fCpa', 'fCpaXY', 
                        'fImpactParameter0', 'fImpactParameter1', 'fImpactParameter2',
                        'fNSigTpcTofPi0', 'fNSigTpcTofKa1', 'fNSigTpcTofPi2'
                        ] 
                       # list of variables to plot
    train_test_log: True # use log scale for plots of train and test distributions
  
appl: 
    column_to_save_list: ['fM', 'fPt'] # list of variables saved in the dataframes with the applied models

standalone_appl:
    treename: null # null if using parquet
    inputs: [] # list of parquet files for the model application
    output_names: [] # names for the outputs (one for each file)
    output_dir: null # output directory

conversion:
    output_folder : '/home/lagliett/outputML/apass7Dplus/noNorm/converted/'
